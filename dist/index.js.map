{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { TextEncoder, TextDecoder } from 'util'\n\nconst ZERO_WIDTH_SPACE = String.fromCodePoint(8203)\nconst ZERO_WIDTH_NON_JOINER = String.fromCodePoint(8204)\nconst ZERO_WIDTH_JOINER = String.fromCodePoint(8205)\n\nexport const zeroWidthEncode = (string: string): string => {\n    const textEncoder = new TextEncoder()\n    const binaryStrings = textEncoder\n        .encode(string)\n        .reduce(\n            (acc: string[], byte: number) => acc.concat(byte.toString(2)),\n            []\n        )\n\n    let zeroWidthString = ''\n    for (const binaryString of binaryStrings) {\n        for (const digit of binaryString) {\n            switch (digit) {\n                case '0':\n                    zeroWidthString += ZERO_WIDTH_SPACE\n                    break\n                case '1':\n                    zeroWidthString += ZERO_WIDTH_NON_JOINER\n                    break\n            }\n        }\n        zeroWidthString += ZERO_WIDTH_JOINER\n    }\n\n    return zeroWidthString\n}\n\nexport const zeroWidthDecode = (zeroWidthString: string): string => {\n    const binaryStrings: string[] = []\n    let currentBinaryString = ''\n    for (const char of zeroWidthString) {\n        switch (char) {\n            case ZERO_WIDTH_SPACE:\n                currentBinaryString += '0'\n                break\n            case ZERO_WIDTH_NON_JOINER:\n                currentBinaryString += '1'\n                break\n            case ZERO_WIDTH_JOINER:\n                binaryStrings.push(currentBinaryString)\n                currentBinaryString = ''\n                break\n        }\n    }\n\n    const bytes = new Uint8Array(\n        binaryStrings.map((binaryString) => parseInt(binaryString, 2))\n    )\n    const textDecoder = new TextDecoder('utf-8')\n    const string = textDecoder.decode(bytes)\n\n    return string\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,EAAA,oBAAAC,IAAA,eAAAC,EAAAJ,GAAA,IAAAK,EAAyC,gBAEnCC,EAAmB,OAAO,cAAc,IAAI,EAC5CC,EAAwB,OAAO,cAAc,IAAI,EACjDC,EAAoB,OAAO,cAAc,IAAI,EAEtCL,EAAmBM,GAA2B,CAEvD,IAAMC,EADc,IAAI,cAAY,EAE/B,OAAOD,CAAM,EACb,OACG,CAACE,EAAeC,IAAiBD,EAAI,OAAOC,EAAK,SAAS,CAAC,CAAC,EAC5D,CAAC,CACL,EAEAC,EAAkB,GACtB,QAAWC,KAAgBJ,EAAe,CACtC,QAAWK,KAASD,EAChB,OAAQC,EAAO,CACX,IAAK,IACDF,GAAmBP,EACnB,MACJ,IAAK,IACDO,GAAmBN,EACnB,KACR,CAEJM,GAAmBL,CACvB,CAEA,OAAOK,CACX,EAEaX,EAAmBW,GAAoC,CAChE,IAAMH,EAA0B,CAAC,EAC7BM,EAAsB,GAC1B,QAAWC,KAAQJ,EACf,OAAQI,EAAM,CACV,KAAKX,EACDU,GAAuB,IACvB,MACJ,KAAKT,EACDS,GAAuB,IACvB,MACJ,KAAKR,EACDE,EAAc,KAAKM,CAAmB,EACtCA,EAAsB,GACtB,KACR,CAGJ,IAAME,EAAQ,IAAI,WACdR,EAAc,IAAKI,GAAiB,SAASA,EAAc,CAAC,CAAC,CACjE,EAIA,OAHoB,IAAI,cAAY,OAAO,EAChB,OAAOI,CAAK,CAG3C",
  "names": ["src_exports", "__export", "zeroWidthDecode", "zeroWidthEncode", "__toCommonJS", "import_util", "ZERO_WIDTH_SPACE", "ZERO_WIDTH_NON_JOINER", "ZERO_WIDTH_JOINER", "string", "binaryStrings", "acc", "byte", "zeroWidthString", "binaryString", "digit", "currentBinaryString", "char", "bytes"]
}
